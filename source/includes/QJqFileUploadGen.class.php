<?php
	/**
	 * QJqFileUploadGen File
	 * 
	 * The abstract QJqFileUploadGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QJqFileUploadBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QJqFileUpload class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * 
	 */
	class QJqFileUpload_addEvent extends QJqUiEvent {
		const EventName = 'fileuploadadd';
	}
	/**
	 * 
	 */
	class QJqFileUpload_submitEvent extends QJqUiEvent {
		const EventName = 'fileuploadsubmit';
	}
	/**
	 * 
	 */
	class QJqFileUpload_sendEvent extends QJqUiEvent {
		const EventName = 'fileuploadsend';
	}
	/**
	 * 
	 */
	class QJqFileUpload_doneEvent extends QJqUiEvent {
		const EventName = 'fileuploaddone';
	}
	/**
	 * 
	 */
	class QJqFileUpload_failEvent extends QJqUiEvent {
		const EventName = 'fileuploadfail';
	}
	/**
	 * 
	 */
	class QJqFileUpload_alwaysEvent extends QJqUiEvent {
		const EventName = 'fileuploadalways';
	}
	/**
	 * 
	 */
	class QJqFileUpload_progressEvent extends QJqUiEvent {
		const EventName = 'fileuploadprogress';
	}
	/**
	 * 
	 */
	class QJqFileUpload_progressallEvent extends QJqUiEvent {
		const EventName = 'fileuploadprogressall';
	}
	/**
	 * 
	 */
	class QJqFileUpload_startEvent extends QJqUiEvent {
		const EventName = 'fileuploadstart';
	}
	/**
	 * 
	 */
	class QJqFileUpload_stopEvent extends QJqUiEvent {
		const EventName = 'fileuploadstop';
	}
	/**
	 * 
	 */
	class QJqFileUpload_changeEvent extends QJqUiEvent {
		const EventName = 'fileuploadchange';
	}
	/**
	 * 
	 */
	class QJqFileUpload_pasteEvent extends QJqUiEvent {
		const EventName = 'fileuploadpaste';
	}
	/**
	 * 
	 */
	class QJqFileUpload_dropEvent extends QJqUiEvent {
		const EventName = 'fileuploaddrop';
	}
	/**
	 * 
	 */
	class QJqFileUpload_dragoverEvent extends QJqUiEvent {
		const EventName = 'fileuploaddragover';
	}
	/**
	 * 
	 */
	class QJqFileUpload_processstartEvent extends QJqUiEvent {
		const EventName = 'fileuploadprocessstart';
	}
	/**
	 * 
	 */
	class QJqFileUpload_processEvent extends QJqUiEvent {
		const EventName = 'fileuploadprocess';
	}
	/**
	 * 
	 */
	class QJqFileUpload_processdoneEvent extends QJqUiEvent {
		const EventName = 'fileuploadprocessdone';
	}
	/**
	 * 
	 */
	class QJqFileUpload_processfailEvent extends QJqUiEvent {
		const EventName = 'fileuploadprocessfail';
	}
	/**
	 * 
	 */
	class QJqFileUpload_processalwaysEvent extends QJqUiEvent {
		const EventName = 'fileuploadprocessalways';
	}
	/**
	 * 
	 */
	class QJqFileUpload_processstopEvent extends QJqUiEvent {
		const EventName = 'fileuploadprocessstop';
	}
	/**
	 * 
	 */
	class QJqFileUpload_destroyEvent extends QJqUiEvent {
		const EventName = 'fileuploaddestroy';
	}
	/**
	 * 
	 */
	class QJqFileUpload_destroyedEvent extends QJqUiEvent {
		const EventName = 'fileuploaddestroyed';
	}
	/**
	 * 
	 */
	class QJqFileUpload_addedEvent extends QJqUiEvent {
		const EventName = 'fileuploadadded';
	}
	/**
	 * 
	 */
	class QJqFileUpload_sentEvent extends QJqUiEvent {
		const EventName = 'fileuploadsent';
	}
	/**
	 * 
	 */
	class QJqFileUpload_completedEvent extends QJqUiEvent {
		const EventName = 'fileuploadcompleted';
	}
	/**
	 * 
	 */
	class QJqFileUpload_failedEvent extends QJqUiEvent {
		const EventName = 'fileuploadfailed';
	}
	/**
	 * 
	 */
	class QJqFileUpload_finishedEvent extends QJqUiEvent {
		const EventName = 'fileuploadfinished';
	}
	/**
	 * 
	 */
	class QJqFileUpload_startedEvent extends QJqUiEvent {
		const EventName = 'fileuploadstarted';
	}
	/**
	 * 
	 */
	class QJqFileUpload_stoppedEvent extends QJqUiEvent {
		const EventName = 'fileuploadstopped';
	}

	/* Custom "property" event classes for this control */

	/**
	 * Generated QJqFileUploadGen class.
	 * 
	 * This is the QJqFileUploadGen class which is automatically generated
	 * by scraping the JQuery UI documentation website. As such, it includes all the options
	 * as listed by the JQuery UI website, which may or may not be appropriate for QCubed. See
	 * the QJqFileUploadBase class for any glue code to make this class more
	 * usable in QCubed.
	 * 
	 * @see QJqFileUploadBase
	 * @package Controls\Base
	 * @property string $Type <p>The HTTP request method for the file uploads. Can be "POST", "PUT" or
	 * 		"PATCH" and defaults to "POST".</p>
	 * @property string $DataType <p>The type of data that is expected back from the server. 
	 * 		</p>
	 * <p><strong>Note:</strong> The UI version of the File Upload plugin
	 * 		sets this option to "json" by default.</p>
	 * @property mixed $DropZone <p>The drop target <a href="http://api.jquery.com/Types/#jQuery">jQuery
	 * 		object</a>, by default the complete document.<br> Set to null or an empty
	 * 		jQuery collection to disable drag &amp; drop support:</p>
	 * @property mixed $PasteZone <p>The paste target <a href="http://api.jquery.com/Types/#jQuery">jQuery
	 * 		object</a>, by the default the complete document.<br> Set to null or an
	 * 		empty jQuery collection to disable paste support:</p>
	 * @property mixed $FileInput <p>The file input field <a
	 * 		href="http://api.jquery.com/Types/#jQuery">jQuery object</a>, that is
	 * 		listened for change events.<br> If undefined, it is set to the file input
	 * 		fields inside of the widget element on plugin initialization.<br> Set to
	 * 		null or an empty jQuery collection to disable the change listener.</p>
	 * @property boolean $ReplaceFileInput <p>By default, the file input field is replaced with a clone after each
	 * 		input field change event.<br> This is required for iframe transport queues
	 * 		and allows change events to be fired for the same file selection, but can
	 * 		be disabled by setting this option to false (more in-depth information can
	 * 		be found <a
	 * 		href="https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-is-the-file-input-field-cloned-and-replaced-after-each-selection">in
	 * 		the FAQ</a>).</p>
	 * @property string $ParamName <p>The parameter name for the file form data (the request argument
	 * 		name).<br> If undefined or empty, the name property of the file input field
	 * 		is used, or "files[]" if the file input name property is also empty. Can be
	 * 		a string or an array of strings.</p>
	 * @property string $FormAcceptCharset <p>Allows to set the accept-charset attribute for the iframe upload
	 * 		forms.<br> If formAcceptCharset is not set, the accept-charset attribute of
	 * 		the file upload widget form is used, if available.</p>
	 * @property boolean $SingleFileUploads <p>By default, each file of a selection is uploaded using an individual
	 * 		request for <a
	 * 		href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> type
	 * 		uploads.<br> Set this option to false to upload file selections in one
	 * 		request each.</p>
	 * <p><strong>Note:</strong> Uploading multiple files with
	 * 		one request requires the multipart option to be set to <em>true</em> (the
	 * 		default).</p>
	 * @property integer $LimitMultiFileUploads <p>To limit the number of files uploaded with one <a
	 * 		href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> request, set
	 * 		the following option to an integer greater than 0:</p>
	 * @property boolean $SequentialUploads <p>Set this option to true to issue all file upload requests in a
	 * 		sequential order instead of simultaneous requests.</p>
	 * @property integer $LimitConcurrentUploads <p>To limit the number of concurrent uploads, set this option to an integer
	 * 		value greater than 0.</p>
	 * @property boolean $ForceIframeTransport <p>Set this option to true to force iframe transport uploads, even if the
	 * 		browser is capable of <a
	 * 		href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file
	 * 		uploads.<br> This can be useful for cross-site file uploads, if the <a
	 * 		href="https://developer.mozilla.org/En/HTTP_Access_Control#Access-Control-Allow-Origin">Access-Control-Allow-Origin</a>
	 * 		header cannot be set for the server-side upload handler which is required
	 * 		for cross-site <a
	 * 		href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file
	 * 		uploads.</p>
	 * @property string $Redirect <p>Set this option to the location of a redirect url on the origin server
	 * 		(the server that hosts the file upload form), for cross-domain iframe
	 * 		transport uploads. If set, this value is sent as part of the form data to
	 * 		the upload server.<br> The upload server is supposed to redirect the
	 * 		browser to this url after the upload completes and append the upload
	 * 		information as URL-encoded JSON string to the redirect URL, e.g. by
	 * 		replacing the "%s" character sequence.</p>
	 * @property string $RedirectParamName <p>The parameter name for the redirect url, sent as part of the form data
	 * 		and set to 'redirect' if this option is empty.</p>
	 * @property string $PostMessage <p>Set this option to the location of a <a
	 * 		href="https://github.com/blueimp/jQuery-File-Upload/blob/master/cors/postmessage.html">postMessage
	 * 		API</a> on the upload server, to enable cross-domain <a
	 * 		href="https://github.com/blueimp/jQuery-File-Upload/blob/master/js/cors/jquery.postmessage-transport.js">postMessage
	 * 		transport</a> uploads.</p>
	 * @property boolean $Multipart <p>By default, <a
	 * 		href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file uploads
	 * 		are sent as multipart/form-data.<br> The iframe transport is always using
	 * 		multipart/form-data.<br> If this option is set to <em>false</em>, the file
	 * 		content is streamed to the server url instead of sending a <a
	 * 		href="http://www.ietf.org/rfc/rfc2388.txt">RFC 2388</a> multipart message
	 * 		for <a
	 * 		href="https://developer.mozilla.org/en/xmlhttprequest">XMLHttpRequest</a>
	 * 		file uploads.<br> Non-multipart uploads are also referred to as <a
	 * 		href="http://de.php.net/manual/en/features.file-upload.put-method.php">HTTP
	 * 		PUT file upload</a>.  </p>
	 * <p><strong>Note:</strong> Additional form data
	 * 		is ignored when the multipart option is set to <em>false</em>.<br>
	 * 		Non-multipart uploads (*multipart: false*) are broken in Safari 5.1 - see
	 * 		<a href="https://github.com/blueimp/jQuery-File-Upload/issues/700">issue
	 * 		#700</a>.</p>
	 * @property integer $MaxChunkSize <p>To upload large files in smaller chunks, set this option to a preferred
	 * 		maximum chunk size. If set to 0, null or undefined, or the browser does not
	 * 		support the required <a
	 * 		href="https://developer.mozilla.org/en/DOM/Blob">Blob API</a>, files will
	 * 		be uploaded as a whole.</p>
	 * <p>For chunked uploads to work in Mozilla
	 * 		Firefox, the <em>multipart</em> option has to be set to <em>false</em>.
	 * 		This is due to Gecko 2.0 (Firefox 4 etc.) adding blobs with an empty
	 * 		filename when building a multipart upload request using the <a
	 * 		href="https://developer.mozilla.org/en/XMLHttpRequest/FormData">FormData</a>
	 * 		interface - see <a
	 * 		href="https://bugzilla.mozilla.org/show_bug.cgi?id=649150">Bugzilla entry
	 * 		#649150</a>. Several server-side frameworks (including PHP and Django)
	 * 		cannot handle multipart file uploads with empty
	 * 		filenames.</p>
	 * <p><strong>Note:</strong> If this option is enabled and
	 * 		<em>singleFileUploads</em> is set to <em>false</em>, only the first file of
	 * 		a selection will be uploaded.</p>
	 * @property integer $UploadedBytes <p>When a non-multipart upload or a chunked multipart upload has been
	 * 		aborted, this option can be used to resume the upload by setting it to the
	 * 		size of the already uploaded bytes. This option is most useful when
	 * 		modifying the options object inside of the "add" or "send" callbacks, as
	 * 		the options are cloned for each file upload.</p>
	 * @property boolean $RecalculateProgress <p>By default, failed (abort or error) file uploads are removed from the
	 * 		global progress calculation.<br> Set this option to false to prevent
	 * 		recalculating the global progress data.</p>
	 * @property integer $ProgressInterval <p>The minimum time interval in milliseconds to calculate and trigger
	 * 		progress events.</p>
	 * @property integer $BitrateInterval <p>The minimum time interval in milliseconds to calculate progress
	 * 		bitrate.</p>
	 * @property array $FormData <p>Additional form data to be sent along with the file uploads can be set
	 * 		using this option, which accepts an array of objects with name and value
	 * 		properties, a function returning such an array, a <a
	 * 		href="https://developer.mozilla.org/en/XMLHttpRequest/FormData">FormData</a>
	 * 		object (for <a
	 * 		href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file
	 * 		uploads), or a simple object.<br> The form of the first fileInput is given
	 * 		as parameter to the function.</p>
	 * <p><strong>Note:</strong> Additional form
	 * 		data is ignored when the <em>multipart</em> option is set to
	 * 		<em>false</em>.</p>
	 * @property QJsClosure $Add <p>The add callback can be understood as the callback for the file upload
	 * 		request queue. It is invoked as soon as files are added to the fileupload
	 * 		widget - via file input selection, drag &amp; drop or <em>add</em> <a
	 * 		class="internal present"
	 * 		href="/blueimp/jQuery-File-Upload/wiki/API">API</a> call.</p>
	 * <p>The data
	 * 		parameter allows to override plugin options as well as define ajax
	 * 		settings.<br><em>data.files</em> holds a list of files for the upload
	 * 		request: If the <em>singleFileUploads</em> option is enabled (which is the
	 * 		default), the add callback will be called once for each file in the
	 * 		selection for <a
	 * 		href="https://developer.mozilla.org/en/xmlhttprequest">XHR</a> file
	 * 		uploads, with a <em>data.files</em> array length of one, as each file is
	 * 		uploaded individually. Else the <em>add</em> callback will be called once
	 * 		for each file selection.</p>
	 * <p>The upload starts when the <em>submit</em>
	 * 		method is invoked on the data parameter.<br><em>data.submit()</em> returns
	 * 		a <a href="http://api.jquery.com/Types/#Promise">Promise</a> object and
	 * 		allows to attach additional handlers using jQuery's <a
	 * 		href="http://api.jquery.com/category/deferred-object/">Deferred</a>
	 * 		callbacks.</p>
	 * @property QJsClosure $Submit <p>Callback for the submit event of each file upload.<br> If this callback
	 * 		returns false, the file upload request is not started.</p>
	 * @property QJsClosure $Send <p>Callback for the start of each file upload request.<br> If this callback
	 * 		returns false, the file upload request is aborted.</p>
	 * @property QJsClosure $Done <p>Callback for successful upload requests. This callback is the equivalent
	 * 		to the success callback provided by <a
	 * 		href="http://api.jquery.com/jQuery.ajax/">jQuery ajax()</a> and will also
	 * 		be called if the server returns a JSON response with an error property.</p>
	 * @property QJsClosure $Fail <p>Callback for failed (abort or error) upload requests. This callback is
	 * 		the equivalent to the error callback provided by <a
	 * 		href="http://api.jquery.com/jQuery.ajax/">jQuery ajax()</a> and will not be
	 * 		called if the server returns a JSON response with an error property, as
	 * 		this counts as successful request due to the successful HTTP response.</p>
	 * @property QJsClosure $Always <p>Callback for completed (success, abort or error) upload requests. This
	 * 		callback is the equivalent to the complete callback provided by <a
	 * 		href="http://api.jquery.com/jQuery.ajax/">jQuery ajax()</a>.</p>
	 * @property QJsClosure $Progress <p>Callback for upload progress events.</p>
	 * @property QJsClosure $Progressall <p>Callback for global upload progress events.</p>
	 * @property QJsClosure $Start <p>Callback for uploads start, equivalent to the global <a
	 * 		href="http://api.jquery.com/ajaxStart/">ajaxStart</a> event (but for file
	 * 		upload requests only).</p>
	 * @property QJsClosure $Stop <p>Callback for uploads stop, equivalent to the global <a
	 * 		href="http://api.jquery.com/ajaxStop/">ajaxStop</a> event (but for file
	 * 		upload requests only).</p>
	 * @property QJsClosure $Change <p>Callback for change events of the fileInput collection.</p>
	 * @property QJsClosure $Paste <p>Callback for paste events to the dropZone collection.</p>
	 * @property QJsClosure $Drop <p>Callback for drop events of the dropZone collection.</p>
	 * @property QJsClosure $Dragover <p>Callback for dragover events of the dropZone collection.</p>
	 * @property boolean $Chunksend <p>Callback for the start of each chunk upload request.<br> If this
	 * 		callback returns false, the chunk upload request is aborted.</p>
	 * @property boolean $Chunkdone <p>Callback for successful chunk upload requests.</p>
	 * @property boolean $Chunkfail <p>Callback for failed (abort or error) chunk upload requests</p>
	 * @property boolean $Chunkalways <p>Callback for completed (success, abort or error) chunk upload
	 * 		requests.</p>
	 * @property boolean $AutoUpload <p>By default, files added to the widget are uploaded as soon as the user
	 * 		clicks on the start buttons. To enable automatic uploads, set this option
	 * 		to true.</p>
	 * @property array $ProcessQueue <p>A list of file processing actions.</p>
	 * @property QJsClosure $Processstart <p>Callback for the start of the fileupload processing queue.</p>
	 * @property QJsClosure $Process <p>Callback for the start of an individual file processing queue.</p>
	 * @property QJsClosure $Processdone <p>Callback for the successful end of an individual file processing
	 * 		queue.</p>
	 * @property QJsClosure $Processfail <p>Callback for the failure of an individual file processing queue.</p>
	 * @property QJsClosure $Processalways <p>Callback for the end (done or fail) of an individual file processing
	 * 		queue.</p>
	 * @property QJsClosure $Processstop <p>Callback for the stop of the fileupload processing queue.</p>
	 * @property boolean $DisableImageHead <p>Disable parsing and storing the image header.</p>
	 * @property boolean $DisableExif <p>Disable parsing Exif data.</p>
	 * @property boolean $DisableExifThumbnail <p>Disable parsing the Exif Thumbnail.</p>
	 * @property boolean $DisableExifSub <p>Disable parsing the Exif Sub IFD (additional Exif info).</p>
	 * @property boolean $DisableExifGps <p>Disable parsing Exif Gps data.</p>
	 * @property boolean $DisableImageMetaDataLoad <p>Disable parsing image meta data (image head and Exif data).</p>
	 * @property boolean $DisableImageMetaDataSave <p>Disables saving the image meta data into the resized images.</p>
	 * @property string $LoadImageFileTypes <p>The regular expression for the types of images to load, matched against
	 * 		the file type.</p>
	 * @property integer $LoadImageMaxFileSize <p>The maximum file size of images to load.</p>
	 * @property boolean $LoadImageNoRevoke <p>Don't revoke the object URL created to load the image.</p>
	 * @property boolean $DisableImageLoad <p>Disable loading and therefore processing of images.</p>
	 * @property integer $ImageMaxWidth <p>The maximum width of resized images.</p>
	 * @property integer $ImageMaxHeight <p>The maximum height of resized images.</p>
	 * @property integer $ImageMinWidth <p>The minimum width of resized images.</p>
	 * @property integer $ImageMinHeight <p>The minimum height of resized images.</p>
	 * @property boolean $ImageCrop <p>Define if resized images should be cropped or only scaled.</p>
	 * @property boolean $DisableImageResize <p>Disables the resize image functionality.</p>
	 * @property integer $PreviewMaxWidth <p>The maximum width of the preview images.</p>
	 * @property integer $PreviewMaxHeight <p>The maximum height of the preview images.</p>
	 * @property integer $PreviewMinWidth <p>The minimum width of preview images.</p>
	 * @property integer $PreviewMinHeight <p>The minimum height of preview images.</p>
	 * @property boolean $PreviewCrop <p>Define if preview images should be cropped or only scaled.</p>
	 * @property integer $PreviewOrientation <p>Defines the preview orientation (1-8) or takes the orientation value
	 * 		from Exif data if set to <em>true</em>.</p>
	 * @property boolean $PreviewThumbnail <p>Create the preview using the Exif data thumbnail.</p>
	 * @property boolean $PreviewCanvas <p>Define if preview images should be resized as canvas elements.</p>
	 * @property string $ImagePreviewName <p>Define the name of the property that the preview element is stored as on
	 * 		the File object.</p>
	 * @property boolean $DisableImagePreview <p>Disables image previews.</p>
	 * @property string $LoadAudioFileTypes <p>The regular expression for the types of audio files to load, matched
	 * 		against the file type.</p>
	 * @property integer $LoadAudioMaxFileSize <p>The maximum file size of audio files to load.</p>
	 * @property string $AudioPreviewName <p>Define the name of the property that the preview element is stored as on
	 * 		the File object.</p>
	 * @property boolean $DisableAudioPreview <p>Disable audio previews.</p>
	 * @property string $LoadVideoFileTypes <p>The regular expression for the types of video files to load, matched
	 * 		against the file type.</p>
	 * @property integer $LoadVideoMaxFileSize <p>The maximum file size of video files to load.</p>
	 * @property string $VideoPreviewName <p>Define the name of the property that the preview element is stored as on
	 * 		the File object.</p>
	 * @property boolean $DisableVideoPreview <p>Disable video previews.</p>
	 * @property string $AcceptFileTypes <p>The regular expression for allowed file types, matches against either
	 * 		file type or file name as only browsers with support for the <a
	 * 		href="https://developer.mozilla.org/en/DOM/file">File API</a> report the
	 * 		file type.</p>
	 * @property integer $MaxFileSize <p>The maximum allowed file size in bytes.</p>
	 * @property integer $MinFileSize <p>The minimum allowed file size in bytes.</p>
	 * @property integer $MaxNumberOfFiles <p>This option limits the number of files that are allowed to be uploaded
	 * 		using this widget.<br> By default, unlimited file uploads are allowed.</p>
	 * @property boolean $DisableValidation <p>Disables file validation.</p>
	 * @property QJsClosure $GetNumberOfFiles <p>This option is a function that returns the current number of files
	 * 		selected and uploaded.<br> It is used in the maxNumberOfFiles
	 * 		validation.</p>
	 * @property mixed $FilesContainer <p>The container for the files listed for upload / download.<br> Is
	 * 		transformed into a <a href="http://api.jquery.com/Types/#jQuery">jQuery
	 * 		object</a> if set as DOM node or string.</p>
	 * @property boolean $PrependFiles <p>By default, files are appended to the files container.<br> Set this
	 * 		option to true, to prepend files instead.</p>
	 * @property QJsClosure $UploadTemplate <p>The upload template function - see <a class="internal present"
	 * 		href="/blueimp/jQuery-File-Upload/wiki/Template-Engine">Template
	 * 		Engine</a>.</p>
	 * @property string $UploadTemplateId <p>The ID of the upload template, given as parameter to the <a
	 * 		href="https://github.com/blueimp/JavaScript-Templates">tmpl()</a> method to
	 * 		set the <strong>uploadTemplate</strong> option.</p>
	 * @property QJsClosure $DownloadTemplate <p>The download template function - see <a class="internal present"
	 * 		href="/blueimp/jQuery-File-Upload/wiki/Template-Engine">Template
	 * 		Engine</a>.</p>
	 * @property string $DownloadTemplateId <p>The ID of the download template, given as parameter to the <a
	 * 		href="https://github.com/blueimp/JavaScript-Templates">tmpl()</a> method to
	 * 		set the <strong>downloadTemplate</strong> option.</p>
	 * @property QJsClosure $Destroy <p>Callback for file deletion events.</p>
	 * <p><strong>Note:</strong> Since
	 * 		the UI version already sets this callback option, it is recommended to use
	 * 		the event binding method to attach additional event listeners.</p>
	 * @property QJsClosure $Destroyed <p>The <strong>destroyed</strong> callback is the equivalent to the
	 * 		<strong>destroy</strong> callback and is triggered after files have been
	 * 		deleted, the transition effects have completed and the download template
	 * 		has been removed.</p>
	 * @property QJsClosure $Added <p>The <strong>added</strong> callback is the equivalent to the
	 * 		<strong>add</strong> callback and is triggered after the upload template
	 * 		has been rendered and the transition effects have completed.</p>
	 * @property QJsClosure $Sent <p>The <strong>sent</strong> (note the "t" instead of the "d") callback is
	 * 		the equivalent to the <strong>send</strong> callback and is triggered after
	 * 		the send callback has run and the files are about to be sent.</p>
	 * @property QJsClosure $Completed <p>The <strong>completed</strong> callback is the equivalent to the
	 * 		<strong>done</strong> callback and is triggered after successful uploads
	 * 		after the download template has been rendered and the transition effects
	 * 		have completed.</p>
	 * @property QJsClosure $Failed <p>The <strong>failed</strong> callback is the equivalent to the
	 * 		<strong>fail</strong> callback and is triggered after failed uploads after
	 * 		the download template has been rendered and the transition effects have
	 * 		completed.</p>
	 * @property QJsClosure $Finished <p>The <strong>finished</strong> callback is the equivalent to the
	 * 		<strong>always</strong> callback and is triggered after both completed and
	 * 		failed uploads after the equivalent template has been rendered and the
	 * 		transition effects have completed.</p>
	 * @property QJsClosure $Started <p>The <strong>started</strong> callback is the equivalent to the
	 * 		<strong>start</strong> callback and is triggered after the start callback
	 * 		has run and the transition effects called in the start callback have
	 * 		completed.</p>
	 * <p><strong>Note:</strong> Unlike the start callback, which
	 * 		is always called before all send callbacks, the started callback might be
	 * 		called after the sent callbacks, depending on the duration of the
	 * 		transition effects in those callbacks.</p>
	 * @property QJsClosure $Stopped <p>The <strong>stopped</strong> callback is the equivalent to the
	 * 		<strong>stop</strong> callback and is triggered after the stop callback has
	 * 		run and the transition effects called in the stop callback and all done
	 * 		callbacks have completed.</p>
	 * <p>The <strong>stopped</strong> callback is
	 * 		therefore always triggered after each completed, failed and finished
	 * 		callback is done.</p>
	 */

	class QJqFileUploadGen extends QFileControl	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var string */
		protected $strType;
		/** @var string */
		protected $strDataType;
		/** @var mixed */
		protected $mixDropZone;
		/** @var mixed */
		protected $mixPasteZone;
		/** @var mixed */
		protected $mixFileInput;
		/** @var boolean */
		protected $blnReplaceFileInput;
		/** @var string */
		protected $strParamName;
		/** @var string */
		protected $strFormAcceptCharset;
		/** @var boolean */
		protected $blnSingleFileUploads;
		/** @var integer */
		protected $intLimitMultiFileUploads;
		/** @var boolean */
		protected $blnSequentialUploads;
		/** @var integer */
		protected $intLimitConcurrentUploads;
		/** @var boolean */
		protected $blnForceIframeTransport;
		/** @var string */
		protected $strRedirect;
		/** @var string */
		protected $strRedirectParamName;
		/** @var string */
		protected $strPostMessage;
		/** @var boolean */
		protected $blnMultipart;
		/** @var integer */
		protected $intMaxChunkSize;
		/** @var integer */
		protected $intUploadedBytes;
		/** @var boolean */
		protected $blnRecalculateProgress;
		/** @var integer */
		protected $intProgressInterval;
		/** @var integer */
		protected $intBitrateInterval;
		/** @var array */
		protected $arrFormData;
		/** @var QJsClosure */
		protected $mixAdd;
		/** @var QJsClosure */
		protected $mixSubmit;
		/** @var QJsClosure */
		protected $mixSend;
		/** @var QJsClosure */
		protected $mixDone;
		/** @var QJsClosure */
		protected $mixFail;
		/** @var QJsClosure */
		protected $mixAlways;
		/** @var QJsClosure */
		protected $mixProgress;
		/** @var QJsClosure */
		protected $mixProgressall;
		/** @var QJsClosure */
		protected $mixStart;
		/** @var QJsClosure */
		protected $mixStop;
		/** @var QJsClosure */
		protected $mixChange;
		/** @var QJsClosure */
		protected $mixPaste;
		/** @var QJsClosure */
		protected $mixDrop;
		/** @var QJsClosure */
		protected $mixDragover;
		/** @var boolean */
		protected $blnChunksend;
		/** @var boolean */
		protected $blnChunkdone;
		/** @var boolean */
		protected $blnChunkfail;
		/** @var boolean */
		protected $blnChunkalways;
		/** @var boolean */
		protected $blnAutoUpload;
		/** @var array */
		protected $arrProcessQueue;
		/** @var QJsClosure */
		protected $mixProcessstart;
		/** @var QJsClosure */
		protected $mixProcess;
		/** @var QJsClosure */
		protected $mixProcessdone;
		/** @var QJsClosure */
		protected $mixProcessfail;
		/** @var QJsClosure */
		protected $mixProcessalways;
		/** @var QJsClosure */
		protected $mixProcessstop;
		/** @var boolean */
		protected $blnDisableImageHead;
		/** @var boolean */
		protected $blnDisableExif;
		/** @var boolean */
		protected $blnDisableExifThumbnail;
		/** @var boolean */
		protected $blnDisableExifSub;
		/** @var boolean */
		protected $blnDisableExifGps;
		/** @var boolean */
		protected $blnDisableImageMetaDataLoad;
		/** @var boolean */
		protected $blnDisableImageMetaDataSave;
		/** @var string */
		protected $strLoadImageFileTypes;
		/** @var integer */
		protected $intLoadImageMaxFileSize;
		/** @var boolean */
		protected $blnLoadImageNoRevoke;
		/** @var boolean */
		protected $blnDisableImageLoad;
		/** @var integer */
		protected $intImageMaxWidth;
		/** @var integer */
		protected $intImageMaxHeight;
		/** @var integer */
		protected $intImageMinWidth;
		/** @var integer */
		protected $intImageMinHeight;
		/** @var boolean */
		protected $blnImageCrop;
		/** @var boolean */
		protected $blnDisableImageResize;
		/** @var integer */
		protected $intPreviewMaxWidth;
		/** @var integer */
		protected $intPreviewMaxHeight;
		/** @var integer */
		protected $intPreviewMinWidth;
		/** @var integer */
		protected $intPreviewMinHeight;
		/** @var boolean */
		protected $blnPreviewCrop;
		/** @var integer */
		protected $intPreviewOrientation;
		/** @var boolean */
		protected $blnPreviewThumbnail;
		/** @var boolean */
		protected $blnPreviewCanvas;
		/** @var string */
		protected $strImagePreviewName;
		/** @var boolean */
		protected $blnDisableImagePreview;
		/** @var string */
		protected $strLoadAudioFileTypes;
		/** @var integer */
		protected $intLoadAudioMaxFileSize;
		/** @var string */
		protected $strAudioPreviewName;
		/** @var boolean */
		protected $blnDisableAudioPreview;
		/** @var string */
		protected $strLoadVideoFileTypes;
		/** @var integer */
		protected $intLoadVideoMaxFileSize;
		/** @var string */
		protected $strVideoPreviewName;
		/** @var boolean */
		protected $blnDisableVideoPreview;
		/** @var string */
		protected $strAcceptFileTypes;
		/** @var integer */
		protected $intMaxFileSize;
		/** @var integer */
		protected $intMinFileSize;
		/** @var integer */
		protected $intMaxNumberOfFiles;
		/** @var boolean */
		protected $blnDisableValidation;
		/** @var QJsClosure */
		protected $mixGetNumberOfFiles;
		/** @var mixed */
		protected $mixFilesContainer;
		/** @var boolean */
		protected $blnPrependFiles;
		/** @var QJsClosure */
		protected $mixUploadTemplate;
		/** @var string */
		protected $strUploadTemplateId;
		/** @var QJsClosure */
		protected $mixDownloadTemplate;
		/** @var string */
		protected $strDownloadTemplateId;
		/** @var QJsClosure */
		protected $mixDestroy;
		/** @var QJsClosure */
		protected $mixDestroyed;
		/** @var QJsClosure */
		protected $mixAdded;
		/** @var QJsClosure */
		protected $mixSent;
		/** @var QJsClosure */
		protected $mixCompleted;
		/** @var QJsClosure */
		protected $mixFailed;
		/** @var QJsClosure */
		protected $mixFinished;
		/** @var QJsClosure */
		protected $mixStarted;
		/** @var QJsClosure */
		protected $mixStopped;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('Type', 'type');
			$strJqOptions .= $this->makeJsProperty('DataType', 'dataType');
			$strJqOptions .= $this->makeJsProperty('DropZone', 'dropZone');
			$strJqOptions .= $this->makeJsProperty('PasteZone', 'pasteZone');
			$strJqOptions .= $this->makeJsProperty('FileInput', 'fileInput');
			$strJqOptions .= $this->makeJsProperty('ReplaceFileInput', 'replaceFileInput');
			$strJqOptions .= $this->makeJsProperty('ParamName', 'paramName');
			$strJqOptions .= $this->makeJsProperty('FormAcceptCharset', 'formAcceptCharset');
			$strJqOptions .= $this->makeJsProperty('SingleFileUploads', 'singleFileUploads');
			$strJqOptions .= $this->makeJsProperty('LimitMultiFileUploads', 'limitMultiFileUploads');
			$strJqOptions .= $this->makeJsProperty('SequentialUploads', 'sequentialUploads');
			$strJqOptions .= $this->makeJsProperty('LimitConcurrentUploads', 'limitConcurrentUploads');
			$strJqOptions .= $this->makeJsProperty('ForceIframeTransport', 'forceIframeTransport');
			$strJqOptions .= $this->makeJsProperty('Redirect', 'redirect');
			$strJqOptions .= $this->makeJsProperty('RedirectParamName', 'redirectParamName');
			$strJqOptions .= $this->makeJsProperty('PostMessage', 'postMessage');
			$strJqOptions .= $this->makeJsProperty('Multipart', 'multipart');
			$strJqOptions .= $this->makeJsProperty('MaxChunkSize', 'maxChunkSize');
			$strJqOptions .= $this->makeJsProperty('UploadedBytes', 'uploadedBytes');
			$strJqOptions .= $this->makeJsProperty('RecalculateProgress', 'recalculateProgress');
			$strJqOptions .= $this->makeJsProperty('ProgressInterval', 'progressInterval');
			$strJqOptions .= $this->makeJsProperty('BitrateInterval', 'bitrateInterval');
			$strJqOptions .= $this->makeJsProperty('FormData', 'formData');
			$strJqOptions .= $this->makeJsProperty('Add', 'add');
			$strJqOptions .= $this->makeJsProperty('Submit', 'submit');
			$strJqOptions .= $this->makeJsProperty('Send', 'send');
			$strJqOptions .= $this->makeJsProperty('Done', 'done');
			$strJqOptions .= $this->makeJsProperty('Fail', 'fail');
			$strJqOptions .= $this->makeJsProperty('Always', 'always');
			$strJqOptions .= $this->makeJsProperty('Progress', 'progress');
			$strJqOptions .= $this->makeJsProperty('Progressall', 'progressall');
			$strJqOptions .= $this->makeJsProperty('Start', 'start');
			$strJqOptions .= $this->makeJsProperty('Stop', 'stop');
			$strJqOptions .= $this->makeJsProperty('Change', 'change');
			$strJqOptions .= $this->makeJsProperty('Paste', 'paste');
			$strJqOptions .= $this->makeJsProperty('Drop', 'drop');
			$strJqOptions .= $this->makeJsProperty('Dragover', 'dragover');
			$strJqOptions .= $this->makeJsProperty('Chunksend', 'chunksend');
			$strJqOptions .= $this->makeJsProperty('Chunkdone', 'chunkdone');
			$strJqOptions .= $this->makeJsProperty('Chunkfail', 'chunkfail');
			$strJqOptions .= $this->makeJsProperty('Chunkalways', 'chunkalways');
			$strJqOptions .= $this->makeJsProperty('AutoUpload', 'autoUpload');
			$strJqOptions .= $this->makeJsProperty('ProcessQueue', 'processQueue');
			$strJqOptions .= $this->makeJsProperty('Processstart', 'processstart');
			$strJqOptions .= $this->makeJsProperty('Process', 'process');
			$strJqOptions .= $this->makeJsProperty('Processdone', 'processdone');
			$strJqOptions .= $this->makeJsProperty('Processfail', 'processfail');
			$strJqOptions .= $this->makeJsProperty('Processalways', 'processalways');
			$strJqOptions .= $this->makeJsProperty('Processstop', 'processstop');
			$strJqOptions .= $this->makeJsProperty('DisableImageHead', 'disableImageHead');
			$strJqOptions .= $this->makeJsProperty('DisableExif', 'disableExif');
			$strJqOptions .= $this->makeJsProperty('DisableExifThumbnail', 'disableExifThumbnail');
			$strJqOptions .= $this->makeJsProperty('DisableExifSub', 'disableExifSub');
			$strJqOptions .= $this->makeJsProperty('DisableExifGps', 'disableExifGps');
			$strJqOptions .= $this->makeJsProperty('DisableImageMetaDataLoad', 'disableImageMetaDataLoad');
			$strJqOptions .= $this->makeJsProperty('DisableImageMetaDataSave', 'disableImageMetaDataSave');
			$strJqOptions .= $this->makeJsProperty('LoadImageFileTypes', 'loadImageFileTypes');
			$strJqOptions .= $this->makeJsProperty('LoadImageMaxFileSize', 'loadImageMaxFileSize');
			$strJqOptions .= $this->makeJsProperty('LoadImageNoRevoke', 'loadImageNoRevoke');
			$strJqOptions .= $this->makeJsProperty('DisableImageLoad', 'disableImageLoad');
			$strJqOptions .= $this->makeJsProperty('ImageMaxWidth', 'imageMaxWidth');
			$strJqOptions .= $this->makeJsProperty('ImageMaxHeight', 'imageMaxHeight');
			$strJqOptions .= $this->makeJsProperty('ImageMinWidth', 'imageMinWidth');
			$strJqOptions .= $this->makeJsProperty('ImageMinHeight', 'imageMinHeight');
			$strJqOptions .= $this->makeJsProperty('ImageCrop', 'imageCrop');
			$strJqOptions .= $this->makeJsProperty('DisableImageResize', 'disableImageResize');
			$strJqOptions .= $this->makeJsProperty('PreviewMaxWidth', 'previewMaxWidth');
			$strJqOptions .= $this->makeJsProperty('PreviewMaxHeight', 'previewMaxHeight');
			$strJqOptions .= $this->makeJsProperty('PreviewMinWidth', 'previewMinWidth');
			$strJqOptions .= $this->makeJsProperty('PreviewMinHeight', 'previewMinHeight');
			$strJqOptions .= $this->makeJsProperty('PreviewCrop', 'previewCrop');
			$strJqOptions .= $this->makeJsProperty('PreviewOrientation', 'previewOrientation');
			$strJqOptions .= $this->makeJsProperty('PreviewThumbnail', 'previewThumbnail');
			$strJqOptions .= $this->makeJsProperty('PreviewCanvas', 'previewCanvas');
			$strJqOptions .= $this->makeJsProperty('ImagePreviewName', 'imagePreviewName');
			$strJqOptions .= $this->makeJsProperty('DisableImagePreview', 'disableImagePreview');
			$strJqOptions .= $this->makeJsProperty('LoadAudioFileTypes', 'loadAudioFileTypes');
			$strJqOptions .= $this->makeJsProperty('LoadAudioMaxFileSize', 'loadAudioMaxFileSize');
			$strJqOptions .= $this->makeJsProperty('AudioPreviewName', 'audioPreviewName');
			$strJqOptions .= $this->makeJsProperty('DisableAudioPreview', 'disableAudioPreview');
			$strJqOptions .= $this->makeJsProperty('LoadVideoFileTypes', 'loadVideoFileTypes');
			$strJqOptions .= $this->makeJsProperty('LoadVideoMaxFileSize', 'loadVideoMaxFileSize');
			$strJqOptions .= $this->makeJsProperty('VideoPreviewName', 'videoPreviewName');
			$strJqOptions .= $this->makeJsProperty('DisableVideoPreview', 'disableVideoPreview');
			$strJqOptions .= $this->makeJsProperty('AcceptFileTypes', 'acceptFileTypes');
			$strJqOptions .= $this->makeJsProperty('MaxFileSize', 'maxFileSize');
			$strJqOptions .= $this->makeJsProperty('MinFileSize', 'minFileSize');
			$strJqOptions .= $this->makeJsProperty('MaxNumberOfFiles', 'maxNumberOfFiles');
			$strJqOptions .= $this->makeJsProperty('DisableValidation', 'disableValidation');
			$strJqOptions .= $this->makeJsProperty('GetNumberOfFiles', 'getNumberOfFiles');
			$strJqOptions .= $this->makeJsProperty('FilesContainer', 'filesContainer');
			$strJqOptions .= $this->makeJsProperty('PrependFiles', 'prependFiles');
			$strJqOptions .= $this->makeJsProperty('UploadTemplate', 'uploadTemplate');
			$strJqOptions .= $this->makeJsProperty('UploadTemplateId', 'uploadTemplateId');
			$strJqOptions .= $this->makeJsProperty('DownloadTemplate', 'downloadTemplate');
			$strJqOptions .= $this->makeJsProperty('DownloadTemplateId', 'downloadTemplateId');
			$strJqOptions .= $this->makeJsProperty('Destroy', 'destroy');
			$strJqOptions .= $this->makeJsProperty('Destroyed', 'destroyed');
			$strJqOptions .= $this->makeJsProperty('Added', 'added');
			$strJqOptions .= $this->makeJsProperty('Sent', 'sent');
			$strJqOptions .= $this->makeJsProperty('Completed', 'completed');
			$strJqOptions .= $this->makeJsProperty('Failed', 'failed');
			$strJqOptions .= $this->makeJsProperty('Finished', 'finished');
			$strJqOptions .= $this->makeJsProperty('Started', 'started');
			$strJqOptions .= $this->makeJsProperty('Stopped', 'stopped');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'fileupload';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. 
		 * 
		 * A helper function to call a jQuery UI Method. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}




		public function __get($strName) {
			switch ($strName) {
				case 'Type': return $this->strType;
				case 'DataType': return $this->strDataType;
				case 'DropZone': return $this->mixDropZone;
				case 'PasteZone': return $this->mixPasteZone;
				case 'FileInput': return $this->mixFileInput;
				case 'ReplaceFileInput': return $this->blnReplaceFileInput;
				case 'ParamName': return $this->strParamName;
				case 'FormAcceptCharset': return $this->strFormAcceptCharset;
				case 'SingleFileUploads': return $this->blnSingleFileUploads;
				case 'LimitMultiFileUploads': return $this->intLimitMultiFileUploads;
				case 'SequentialUploads': return $this->blnSequentialUploads;
				case 'LimitConcurrentUploads': return $this->intLimitConcurrentUploads;
				case 'ForceIframeTransport': return $this->blnForceIframeTransport;
				case 'Redirect': return $this->strRedirect;
				case 'RedirectParamName': return $this->strRedirectParamName;
				case 'PostMessage': return $this->strPostMessage;
				case 'Multipart': return $this->blnMultipart;
				case 'MaxChunkSize': return $this->intMaxChunkSize;
				case 'UploadedBytes': return $this->intUploadedBytes;
				case 'RecalculateProgress': return $this->blnRecalculateProgress;
				case 'ProgressInterval': return $this->intProgressInterval;
				case 'BitrateInterval': return $this->intBitrateInterval;
				case 'FormData': return $this->arrFormData;
				case 'Add': return $this->mixAdd;
				case 'Submit': return $this->mixSubmit;
				case 'Send': return $this->mixSend;
				case 'Done': return $this->mixDone;
				case 'Fail': return $this->mixFail;
				case 'Always': return $this->mixAlways;
				case 'Progress': return $this->mixProgress;
				case 'Progressall': return $this->mixProgressall;
				case 'Start': return $this->mixStart;
				case 'Stop': return $this->mixStop;
				case 'Change': return $this->mixChange;
				case 'Paste': return $this->mixPaste;
				case 'Drop': return $this->mixDrop;
				case 'Dragover': return $this->mixDragover;
				case 'Chunksend': return $this->blnChunksend;
				case 'Chunkdone': return $this->blnChunkdone;
				case 'Chunkfail': return $this->blnChunkfail;
				case 'Chunkalways': return $this->blnChunkalways;
				case 'AutoUpload': return $this->blnAutoUpload;
				case 'ProcessQueue': return $this->arrProcessQueue;
				case 'Processstart': return $this->mixProcessstart;
				case 'Process': return $this->mixProcess;
				case 'Processdone': return $this->mixProcessdone;
				case 'Processfail': return $this->mixProcessfail;
				case 'Processalways': return $this->mixProcessalways;
				case 'Processstop': return $this->mixProcessstop;
				case 'DisableImageHead': return $this->blnDisableImageHead;
				case 'DisableExif': return $this->blnDisableExif;
				case 'DisableExifThumbnail': return $this->blnDisableExifThumbnail;
				case 'DisableExifSub': return $this->blnDisableExifSub;
				case 'DisableExifGps': return $this->blnDisableExifGps;
				case 'DisableImageMetaDataLoad': return $this->blnDisableImageMetaDataLoad;
				case 'DisableImageMetaDataSave': return $this->blnDisableImageMetaDataSave;
				case 'LoadImageFileTypes': return $this->strLoadImageFileTypes;
				case 'LoadImageMaxFileSize': return $this->intLoadImageMaxFileSize;
				case 'LoadImageNoRevoke': return $this->blnLoadImageNoRevoke;
				case 'DisableImageLoad': return $this->blnDisableImageLoad;
				case 'ImageMaxWidth': return $this->intImageMaxWidth;
				case 'ImageMaxHeight': return $this->intImageMaxHeight;
				case 'ImageMinWidth': return $this->intImageMinWidth;
				case 'ImageMinHeight': return $this->intImageMinHeight;
				case 'ImageCrop': return $this->blnImageCrop;
				case 'DisableImageResize': return $this->blnDisableImageResize;
				case 'PreviewMaxWidth': return $this->intPreviewMaxWidth;
				case 'PreviewMaxHeight': return $this->intPreviewMaxHeight;
				case 'PreviewMinWidth': return $this->intPreviewMinWidth;
				case 'PreviewMinHeight': return $this->intPreviewMinHeight;
				case 'PreviewCrop': return $this->blnPreviewCrop;
				case 'PreviewOrientation': return $this->intPreviewOrientation;
				case 'PreviewThumbnail': return $this->blnPreviewThumbnail;
				case 'PreviewCanvas': return $this->blnPreviewCanvas;
				case 'ImagePreviewName': return $this->strImagePreviewName;
				case 'DisableImagePreview': return $this->blnDisableImagePreview;
				case 'LoadAudioFileTypes': return $this->strLoadAudioFileTypes;
				case 'LoadAudioMaxFileSize': return $this->intLoadAudioMaxFileSize;
				case 'AudioPreviewName': return $this->strAudioPreviewName;
				case 'DisableAudioPreview': return $this->blnDisableAudioPreview;
				case 'LoadVideoFileTypes': return $this->strLoadVideoFileTypes;
				case 'LoadVideoMaxFileSize': return $this->intLoadVideoMaxFileSize;
				case 'VideoPreviewName': return $this->strVideoPreviewName;
				case 'DisableVideoPreview': return $this->blnDisableVideoPreview;
				case 'AcceptFileTypes': return $this->strAcceptFileTypes;
				case 'MaxFileSize': return $this->intMaxFileSize;
				case 'MinFileSize': return $this->intMinFileSize;
				case 'MaxNumberOfFiles': return $this->intMaxNumberOfFiles;
				case 'DisableValidation': return $this->blnDisableValidation;
				case 'GetNumberOfFiles': return $this->mixGetNumberOfFiles;
				case 'FilesContainer': return $this->mixFilesContainer;
				case 'PrependFiles': return $this->blnPrependFiles;
				case 'UploadTemplate': return $this->mixUploadTemplate;
				case 'UploadTemplateId': return $this->strUploadTemplateId;
				case 'DownloadTemplate': return $this->mixDownloadTemplate;
				case 'DownloadTemplateId': return $this->strDownloadTemplateId;
				case 'Destroy': return $this->mixDestroy;
				case 'Destroyed': return $this->mixDestroyed;
				case 'Added': return $this->mixAdded;
				case 'Sent': return $this->mixSent;
				case 'Completed': return $this->mixCompleted;
				case 'Failed': return $this->mixFailed;
				case 'Finished': return $this->mixFinished;
				case 'Started': return $this->mixStarted;
				case 'Stopped': return $this->mixStopped;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'Type':
					try {
						$this->strType = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'type', $this->strType);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DataType':
					try {
						$this->strDataType = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'dataType', $this->strDataType);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DropZone':
					$this->mixDropZone = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'dropZone', $mixValue);
					}
					break;

				case 'PasteZone':
					$this->mixPasteZone = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'pasteZone', $mixValue);
					}
					break;

				case 'FileInput':
					$this->mixFileInput = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'fileInput', $mixValue);
					}
					break;

				case 'ReplaceFileInput':
					try {
						$this->blnReplaceFileInput = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'replaceFileInput', $this->blnReplaceFileInput);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ParamName':
					try {
						$this->strParamName = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'paramName', $this->strParamName);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'FormAcceptCharset':
					try {
						$this->strFormAcceptCharset = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'formAcceptCharset', $this->strFormAcceptCharset);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SingleFileUploads':
					try {
						$this->blnSingleFileUploads = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'singleFileUploads', $this->blnSingleFileUploads);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LimitMultiFileUploads':
					try {
						$this->intLimitMultiFileUploads = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'limitMultiFileUploads', $this->intLimitMultiFileUploads);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SequentialUploads':
					try {
						$this->blnSequentialUploads = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'sequentialUploads', $this->blnSequentialUploads);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LimitConcurrentUploads':
					try {
						$this->intLimitConcurrentUploads = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'limitConcurrentUploads', $this->intLimitConcurrentUploads);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ForceIframeTransport':
					try {
						$this->blnForceIframeTransport = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'forceIframeTransport', $this->blnForceIframeTransport);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Redirect':
					try {
						$this->strRedirect = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'redirect', $this->strRedirect);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'RedirectParamName':
					try {
						$this->strRedirectParamName = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'redirectParamName', $this->strRedirectParamName);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PostMessage':
					try {
						$this->strPostMessage = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'postMessage', $this->strPostMessage);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Multipart':
					try {
						$this->blnMultipart = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'multipart', $this->blnMultipart);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MaxChunkSize':
					try {
						$this->intMaxChunkSize = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'maxChunkSize', $this->intMaxChunkSize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'UploadedBytes':
					try {
						$this->intUploadedBytes = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'uploadedBytes', $this->intUploadedBytes);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'RecalculateProgress':
					try {
						$this->blnRecalculateProgress = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'recalculateProgress', $this->blnRecalculateProgress);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ProgressInterval':
					try {
						$this->intProgressInterval = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'progressInterval', $this->intProgressInterval);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'BitrateInterval':
					try {
						$this->intBitrateInterval = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'bitrateInterval', $this->intBitrateInterval);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'FormData':
					try {
						$this->arrFormData = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'formData', $this->arrFormData);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Add':
					try {
						$this->mixAdd = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'add', $this->mixAdd);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Submit':
					try {
						$this->mixSubmit = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'submit', $this->mixSubmit);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Send':
					try {
						$this->mixSend = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'send', $this->mixSend);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Done':
					try {
						$this->mixDone = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'done', $this->mixDone);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Fail':
					try {
						$this->mixFail = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'fail', $this->mixFail);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Always':
					try {
						$this->mixAlways = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'always', $this->mixAlways);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Progress':
					try {
						$this->mixProgress = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'progress', $this->mixProgress);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Progressall':
					try {
						$this->mixProgressall = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'progressall', $this->mixProgressall);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Start':
					try {
						$this->mixStart = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'start', $this->mixStart);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Stop':
					try {
						$this->mixStop = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'stop', $this->mixStop);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Change':
					try {
						$this->mixChange = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'change', $this->mixChange);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Paste':
					try {
						$this->mixPaste = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'paste', $this->mixPaste);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Drop':
					try {
						$this->mixDrop = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'drop', $this->mixDrop);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Dragover':
					try {
						$this->mixDragover = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'dragover', $this->mixDragover);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Chunksend':
					try {
						$this->blnChunksend = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'chunksend', $this->blnChunksend);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Chunkdone':
					try {
						$this->blnChunkdone = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'chunkdone', $this->blnChunkdone);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Chunkfail':
					try {
						$this->blnChunkfail = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'chunkfail', $this->blnChunkfail);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Chunkalways':
					try {
						$this->blnChunkalways = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'chunkalways', $this->blnChunkalways);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AutoUpload':
					try {
						$this->blnAutoUpload = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'autoUpload', $this->blnAutoUpload);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ProcessQueue':
					try {
						$this->arrProcessQueue = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'processQueue', $this->arrProcessQueue);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Processstart':
					try {
						$this->mixProcessstart = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'processstart', $this->mixProcessstart);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Process':
					try {
						$this->mixProcess = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'process', $this->mixProcess);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Processdone':
					try {
						$this->mixProcessdone = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'processdone', $this->mixProcessdone);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Processfail':
					try {
						$this->mixProcessfail = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'processfail', $this->mixProcessfail);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Processalways':
					try {
						$this->mixProcessalways = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'processalways', $this->mixProcessalways);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Processstop':
					try {
						$this->mixProcessstop = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'processstop', $this->mixProcessstop);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableImageHead':
					try {
						$this->blnDisableImageHead = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableImageHead', $this->blnDisableImageHead);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableExif':
					try {
						$this->blnDisableExif = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableExif', $this->blnDisableExif);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableExifThumbnail':
					try {
						$this->blnDisableExifThumbnail = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableExifThumbnail', $this->blnDisableExifThumbnail);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableExifSub':
					try {
						$this->blnDisableExifSub = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableExifSub', $this->blnDisableExifSub);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableExifGps':
					try {
						$this->blnDisableExifGps = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableExifGps', $this->blnDisableExifGps);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableImageMetaDataLoad':
					try {
						$this->blnDisableImageMetaDataLoad = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableImageMetaDataLoad', $this->blnDisableImageMetaDataLoad);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableImageMetaDataSave':
					try {
						$this->blnDisableImageMetaDataSave = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableImageMetaDataSave', $this->blnDisableImageMetaDataSave);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LoadImageFileTypes':
					try {
						$this->strLoadImageFileTypes = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'loadImageFileTypes', $this->strLoadImageFileTypes);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LoadImageMaxFileSize':
					try {
						$this->intLoadImageMaxFileSize = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'loadImageMaxFileSize', $this->intLoadImageMaxFileSize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LoadImageNoRevoke':
					try {
						$this->blnLoadImageNoRevoke = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'loadImageNoRevoke', $this->blnLoadImageNoRevoke);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableImageLoad':
					try {
						$this->blnDisableImageLoad = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableImageLoad', $this->blnDisableImageLoad);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ImageMaxWidth':
					try {
						$this->intImageMaxWidth = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'imageMaxWidth', $this->intImageMaxWidth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ImageMaxHeight':
					try {
						$this->intImageMaxHeight = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'imageMaxHeight', $this->intImageMaxHeight);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ImageMinWidth':
					try {
						$this->intImageMinWidth = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'imageMinWidth', $this->intImageMinWidth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ImageMinHeight':
					try {
						$this->intImageMinHeight = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'imageMinHeight', $this->intImageMinHeight);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ImageCrop':
					try {
						$this->blnImageCrop = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'imageCrop', $this->blnImageCrop);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableImageResize':
					try {
						$this->blnDisableImageResize = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableImageResize', $this->blnDisableImageResize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PreviewMaxWidth':
					try {
						$this->intPreviewMaxWidth = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'previewMaxWidth', $this->intPreviewMaxWidth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PreviewMaxHeight':
					try {
						$this->intPreviewMaxHeight = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'previewMaxHeight', $this->intPreviewMaxHeight);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PreviewMinWidth':
					try {
						$this->intPreviewMinWidth = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'previewMinWidth', $this->intPreviewMinWidth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PreviewMinHeight':
					try {
						$this->intPreviewMinHeight = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'previewMinHeight', $this->intPreviewMinHeight);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PreviewCrop':
					try {
						$this->blnPreviewCrop = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'previewCrop', $this->blnPreviewCrop);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PreviewOrientation':
					try {
						$this->intPreviewOrientation = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'previewOrientation', $this->intPreviewOrientation);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PreviewThumbnail':
					try {
						$this->blnPreviewThumbnail = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'previewThumbnail', $this->blnPreviewThumbnail);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PreviewCanvas':
					try {
						$this->blnPreviewCanvas = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'previewCanvas', $this->blnPreviewCanvas);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ImagePreviewName':
					try {
						$this->strImagePreviewName = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'imagePreviewName', $this->strImagePreviewName);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableImagePreview':
					try {
						$this->blnDisableImagePreview = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableImagePreview', $this->blnDisableImagePreview);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LoadAudioFileTypes':
					try {
						$this->strLoadAudioFileTypes = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'loadAudioFileTypes', $this->strLoadAudioFileTypes);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LoadAudioMaxFileSize':
					try {
						$this->intLoadAudioMaxFileSize = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'loadAudioMaxFileSize', $this->intLoadAudioMaxFileSize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AudioPreviewName':
					try {
						$this->strAudioPreviewName = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'audioPreviewName', $this->strAudioPreviewName);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableAudioPreview':
					try {
						$this->blnDisableAudioPreview = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableAudioPreview', $this->blnDisableAudioPreview);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LoadVideoFileTypes':
					try {
						$this->strLoadVideoFileTypes = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'loadVideoFileTypes', $this->strLoadVideoFileTypes);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LoadVideoMaxFileSize':
					try {
						$this->intLoadVideoMaxFileSize = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'loadVideoMaxFileSize', $this->intLoadVideoMaxFileSize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'VideoPreviewName':
					try {
						$this->strVideoPreviewName = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'videoPreviewName', $this->strVideoPreviewName);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableVideoPreview':
					try {
						$this->blnDisableVideoPreview = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableVideoPreview', $this->blnDisableVideoPreview);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AcceptFileTypes':
					try {
						$this->strAcceptFileTypes = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'acceptFileTypes', $this->strAcceptFileTypes);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MaxFileSize':
					try {
						$this->intMaxFileSize = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'maxFileSize', $this->intMaxFileSize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinFileSize':
					try {
						$this->intMinFileSize = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'minFileSize', $this->intMinFileSize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MaxNumberOfFiles':
					try {
						$this->intMaxNumberOfFiles = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'maxNumberOfFiles', $this->intMaxNumberOfFiles);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DisableValidation':
					try {
						$this->blnDisableValidation = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disableValidation', $this->blnDisableValidation);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'GetNumberOfFiles':
					try {
						$this->mixGetNumberOfFiles = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'getNumberOfFiles', $this->mixGetNumberOfFiles);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'FilesContainer':
					$this->mixFilesContainer = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'filesContainer', $mixValue);
					}
					break;

				case 'PrependFiles':
					try {
						$this->blnPrependFiles = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'prependFiles', $this->blnPrependFiles);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'UploadTemplate':
					try {
						$this->mixUploadTemplate = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'uploadTemplate', $this->mixUploadTemplate);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'UploadTemplateId':
					try {
						$this->strUploadTemplateId = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'uploadTemplateId', $this->strUploadTemplateId);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DownloadTemplate':
					try {
						$this->mixDownloadTemplate = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'downloadTemplate', $this->mixDownloadTemplate);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DownloadTemplateId':
					try {
						$this->strDownloadTemplateId = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'downloadTemplateId', $this->strDownloadTemplateId);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Destroy':
					try {
						$this->mixDestroy = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'destroy', $this->mixDestroy);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Destroyed':
					try {
						$this->mixDestroyed = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'destroyed', $this->mixDestroyed);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Added':
					try {
						$this->mixAdded = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'added', $this->mixAdded);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Sent':
					try {
						$this->mixSent = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'sent', $this->mixSent);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Completed':
					try {
						$this->mixCompleted = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'completed', $this->mixCompleted);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Failed':
					try {
						$this->mixFailed = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'failed', $this->mixFailed);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Finished':
					try {
						$this->mixFinished = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'finished', $this->mixFinished);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Started':
					try {
						$this->mixStarted = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'started', $this->mixStarted);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Stopped':
					try {
						$this->mixStopped = QType::Cast($mixValue, 'QJsClosure');
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'stopped', $this->mixStopped);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
